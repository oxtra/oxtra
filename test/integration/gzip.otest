# Testing if oxtra is capable of compressing a file with gzip. We compress the dump_me.cpp file into a temp file (check the return code), unzip it with the official gunzip (check the return code) and check whether the two files are identical. Then we delete temporary files, end expect that the .gz file does not exist anymore (overall return of 1).
./oxtra test/resources/musl/gzip -a "-c test/resources/dump_me.cpp" > test/resources/.gzip.test.gz; echo $?; gunzip test/resources/.gzip.test.gz; echo $?; diff test/resources/dump_me.cpp test/resources/.gzip.test | wc -c; rm test/resources/.gzip.test > /dev/null; rm test/resources/.gzip.test.gz > /dev/null
>>>
0
0
0
>>>=1

# Testing if the help menu is print correctly
./oxtra test/resources/musl/gzip -a "--help"
>>>
Usage: gzip [OPTION]... [FILE]...
Compress or uncompress FILEs (by default, compress FILES in-place).

Mandatory arguments to long options are mandatory for short options too.

  -c, --stdout      write on standard output, keep original files unchanged
  -d, --decompress  decompress
  -f, --force       force overwrite of output file and compress links
  -h, --help        give this help
  -k, --keep        keep (don't delete) input files
  -l, --list        list compressed file contents
  -L, --license     display software license
  -n, --no-name     do not save or restore the original name and timestamp
  -N, --name        save or restore the original name and timestamp
  -q, --quiet       suppress all warnings
  -r, --recursive   operate recursively on directories
      --rsyncable   make rsync-friendly archive
  -S, --suffix=SUF  use suffix SUF on compressed files
      --synchronous synchronous output (safer if system crashes, but slower)
  -t, --test        test compressed file integrity
  -v, --verbose     verbose mode
  -V, --version     display version number
  -1, --fast        compress faster
  -9, --best        compress better

With no FILE, or when FILE is -, read standard input.

Report bugs to <bug-gzip@gnu.org>.
>>>=0